@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface EnableS3Integration {
}


@Configuration
public class S3ClientConfiguration {

    @Bean
    @ConditionalOnAnnotation(EnableS3Integration.class)
    public S3Client s3Client(@Value("${aws.access.key}") String accessKey,
                             @Value("${aws.secret.key}") String secretKey,
                             @Value("${aws.region}") String region) {
        return S3Client.builder()
                .credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKey, secretKey)))
                .region(Region.of(region))
                .build();
    }
}


public class S3Service {

    private final S3Client s3Client;

    @Autowired
    public S3Service(S3Client s3Client) {
        this.s3Client = s3Client;
    }

    public void createFolder(String bucketName, String folderName) {
        s3Client.putObject(PutObjectRequest.builder()
            .bucket(bucketName)
            .key(folderName + "/")
            .build(), RequestBody.empty());
    }

    public void deleteFolder(String bucketName, String folderName) {
        ListObjectsV2Response objects = s3Client.listObjectsV2(ListObjectsV2Request.builder()
            .bucket(bucketName)
            .prefix(folderName + "/")
            .build());
        for (S3Object object : objects.contents()) {
            s3Client.deleteObject(DeleteObjectRequest.builder()
                .bucket(bucketName)
                .key(object.key())
                .build());
        }
    }

    public void uploadFile(String bucketName, String key, Path filePath) {
        s3Client.putObject(PutObjectRequest.builder()
            .bucket(bucketName)
            .key(key)
            .build(), RequestBody.fromFile(filePath));
    }

    public void downloadFile(String bucketName, String key, Path destination) {
        s3Client.getObject(GetObjectRequest.builder()
            .bucket(bucketName)
            .key(key)
            .build(), ResponseTransformer.toFile(destination));
    }

    public void compressFile(Path source, Path destination) throws IOException {
        try (FileOutputStream fos = new FileOutputStream(destination.toFile());
             GZIPOutputStream gos = new GZIPOutputStream(fos);
             FileInputStream fis = new FileInputStream(source.toFile())) {
            byte[] buffer = new byte[1024];
            int len;
            while ((len = fis.read(buffer)) > 0) {
                gos.write(buffer, 0, len);
            }
        }
    }

    public void deleteFile(String bucketName, String key) {
        s3Client.deleteObject(DeleteObjectRequest.builder()
            .bucket(bucketName)
            .key(key)
            .build());
    }
}


@EnableS3Integration
@SpringBootApplication
public class S3IntegrationApplication {
    public static void main(String[] args) {
        SpringApplication.run(S3IntegrationApplication.class, args);
    }
}


============================================================================

import org.springframework.context.annotation.Import;
import java.lang.annotation.*;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(S3Configuration.class) // Import S3 configuration when this annotation is present
public @interface EnableS3Integration {
}



import org.springframework.context.annotation.Condition;
import org.springframework.context.annotation.ConditionContext;
import org.springframework.core.type.AnnotatedTypeMetadata;
import org.springframework.core.type.ClassMetadata;
import java.util.Objects;

public class EnableS3Condition implements Condition {
    @Override
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
        String mainClass = context.getEnvironment().getProperty("sun.java.command");
        if (mainClass != null) {
            try {
                Class<?> clazz = Class.forName(mainClass.split(" ")[0]); // Extract main class name
                return clazz.isAnnotationPresent(EnableS3Integration.class);
            } catch (ClassNotFoundException e) {
                return false;
            }
        }
        return false;
    }
}

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Conditional;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.regions.Region;

@Configuration
public class S3Configuration {

    @Bean
    @Conditional(EnableS3Condition.class)  // Load only if EnableS3Integration is present
    public S3Client s3Client() {
        return S3Client.builder()
                .region(Region.US_EAST_1) // Set your desired region
                .build();
    }
}


